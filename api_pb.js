/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grcp_demo.Lot', null, global);
goog.exportSymbol('proto.grcp_demo.LotPage', null, global);
goog.exportSymbol('proto.grcp_demo.LotSelector', null, global);
goog.exportSymbol('proto.grcp_demo.LotsPage', null, global);
goog.exportSymbol('proto.grcp_demo.Participant', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grcp_demo.LotSelector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grcp_demo.LotSelector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grcp_demo.LotSelector.displayName = 'proto.grcp_demo.LotSelector';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grcp_demo.LotSelector.prototype.toObject = function(opt_includeInstance) {
  return proto.grcp_demo.LotSelector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grcp_demo.LotSelector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.LotSelector.toObject = function(includeInstance, msg) {
  var f, obj = {
    cursor: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grcp_demo.LotSelector}
 */
proto.grcp_demo.LotSelector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grcp_demo.LotSelector;
  return proto.grcp_demo.LotSelector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grcp_demo.LotSelector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grcp_demo.LotSelector}
 */
proto.grcp_demo.LotSelector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCursor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grcp_demo.LotSelector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grcp_demo.LotSelector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grcp_demo.LotSelector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.LotSelector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCursor();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 cursor = 1;
 * @return {number}
 */
proto.grcp_demo.LotSelector.prototype.getCursor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grcp_demo.LotSelector.prototype.setCursor = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.grcp_demo.LotSelector.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grcp_demo.LotSelector.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grcp_demo.LotPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grcp_demo.LotPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grcp_demo.LotPage.displayName = 'proto.grcp_demo.LotPage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grcp_demo.LotPage.prototype.toObject = function(opt_includeInstance) {
  return proto.grcp_demo.LotPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grcp_demo.LotPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.LotPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    lot: (f = msg.getLot()) && proto.grcp_demo.Lot.toObject(includeInstance, f),
    participantsMap: (f = msg.getParticipantsMap()) ? f.toObject(includeInstance, proto.grcp_demo.Participant.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grcp_demo.LotPage}
 */
proto.grcp_demo.LotPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grcp_demo.LotPage;
  return proto.grcp_demo.LotPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grcp_demo.LotPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grcp_demo.LotPage}
 */
proto.grcp_demo.LotPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grcp_demo.Lot;
      reader.readMessage(value,proto.grcp_demo.Lot.deserializeBinaryFromReader);
      msg.setLot(value);
      break;
    case 2:
      var value = msg.getParticipantsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.grcp_demo.Participant.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grcp_demo.LotPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grcp_demo.LotPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grcp_demo.LotPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.LotPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grcp_demo.Lot.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.grcp_demo.Participant.serializeBinaryToWriter);
  }
};


/**
 * optional Lot lot = 1;
 * @return {?proto.grcp_demo.Lot}
 */
proto.grcp_demo.LotPage.prototype.getLot = function() {
  return /** @type{?proto.grcp_demo.Lot} */ (
    jspb.Message.getWrapperField(this, proto.grcp_demo.Lot, 1));
};


/** @param {?proto.grcp_demo.Lot|undefined} value */
proto.grcp_demo.LotPage.prototype.setLot = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grcp_demo.LotPage.prototype.clearLot = function() {
  this.setLot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grcp_demo.LotPage.prototype.hasLot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<uint64, Participant> participants = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.grcp_demo.Participant>}
 */
proto.grcp_demo.LotPage.prototype.getParticipantsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.grcp_demo.Participant>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.grcp_demo.Participant));
};


proto.grcp_demo.LotPage.prototype.clearParticipantsMap = function() {
  this.getParticipantsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grcp_demo.LotsPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grcp_demo.LotsPage.repeatedFields_, null);
};
goog.inherits(proto.grcp_demo.LotsPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grcp_demo.LotsPage.displayName = 'proto.grcp_demo.LotsPage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grcp_demo.LotsPage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grcp_demo.LotsPage.prototype.toObject = function(opt_includeInstance) {
  return proto.grcp_demo.LotsPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grcp_demo.LotsPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.LotsPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    lotsList: jspb.Message.toObjectList(msg.getLotsList(),
    proto.grcp_demo.Lot.toObject, includeInstance),
    participantsMap: (f = msg.getParticipantsMap()) ? f.toObject(includeInstance, proto.grcp_demo.Participant.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grcp_demo.LotsPage}
 */
proto.grcp_demo.LotsPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grcp_demo.LotsPage;
  return proto.grcp_demo.LotsPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grcp_demo.LotsPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grcp_demo.LotsPage}
 */
proto.grcp_demo.LotsPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grcp_demo.Lot;
      reader.readMessage(value,proto.grcp_demo.Lot.deserializeBinaryFromReader);
      msg.addLots(value);
      break;
    case 2:
      var value = msg.getParticipantsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.grcp_demo.Participant.deserializeBinaryFromReader, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grcp_demo.LotsPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grcp_demo.LotsPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grcp_demo.LotsPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.LotsPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.grcp_demo.Lot.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.grcp_demo.Participant.serializeBinaryToWriter);
  }
};


/**
 * repeated Lot lots = 1;
 * @return {!Array<!proto.grcp_demo.Lot>}
 */
proto.grcp_demo.LotsPage.prototype.getLotsList = function() {
  return /** @type{!Array<!proto.grcp_demo.Lot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grcp_demo.Lot, 1));
};


/** @param {!Array<!proto.grcp_demo.Lot>} value */
proto.grcp_demo.LotsPage.prototype.setLotsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.grcp_demo.Lot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grcp_demo.Lot}
 */
proto.grcp_demo.LotsPage.prototype.addLots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.grcp_demo.Lot, opt_index);
};


proto.grcp_demo.LotsPage.prototype.clearLotsList = function() {
  this.setLotsList([]);
};


/**
 * map<uint64, Participant> participants = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.grcp_demo.Participant>}
 */
proto.grcp_demo.LotsPage.prototype.getParticipantsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.grcp_demo.Participant>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.grcp_demo.Participant));
};


proto.grcp_demo.LotsPage.prototype.clearParticipantsMap = function() {
  this.getParticipantsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grcp_demo.Lot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grcp_demo.Lot.repeatedFields_, null);
};
goog.inherits(proto.grcp_demo.Lot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grcp_demo.Lot.displayName = 'proto.grcp_demo.Lot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grcp_demo.Lot.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grcp_demo.Lot.prototype.toObject = function(opt_includeInstance) {
  return proto.grcp_demo.Lot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grcp_demo.Lot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.Lot.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    participantsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grcp_demo.Lot}
 */
proto.grcp_demo.Lot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grcp_demo.Lot;
  return proto.grcp_demo.Lot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grcp_demo.Lot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grcp_demo.Lot}
 */
proto.grcp_demo.Lot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setParticipantsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grcp_demo.Lot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grcp_demo.Lot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grcp_demo.Lot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.Lot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writePackedUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.grcp_demo.Lot.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grcp_demo.Lot.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated uint64 participants = 2;
 * @return {!Array<number>}
 */
proto.grcp_demo.Lot.prototype.getParticipantsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.grcp_demo.Lot.prototype.setParticipantsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.grcp_demo.Lot.prototype.addParticipants = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.grcp_demo.Lot.prototype.clearParticipantsList = function() {
  this.setParticipantsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grcp_demo.Participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grcp_demo.Participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grcp_demo.Participant.displayName = 'proto.grcp_demo.Participant';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grcp_demo.Participant.prototype.toObject = function(opt_includeInstance) {
  return proto.grcp_demo.Participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grcp_demo.Participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.Participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    accountId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lotId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grcp_demo.Participant}
 */
proto.grcp_demo.Participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grcp_demo.Participant;
  return proto.grcp_demo.Participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grcp_demo.Participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grcp_demo.Participant}
 */
proto.grcp_demo.Participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLotId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grcp_demo.Participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.grcp_demo.Participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.grcp_demo.Participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.grcp_demo.Participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLotId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.grcp_demo.Participant.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grcp_demo.Participant.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string account_id = 2;
 * @return {string}
 */
proto.grcp_demo.Participant.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.grcp_demo.Participant.prototype.setAccountId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 lot_id = 3;
 * @return {number}
 */
proto.grcp_demo.Participant.prototype.getLotId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.grcp_demo.Participant.prototype.setLotId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.grcp_demo);
